# LIBRARIES
import json
import requests
from datetime import datetime, timedelta, date
import time
import random
import re

# OTHER SCRIPTS
from config import *
from sql_requests import *


# –ë–ê–ó–û–í–´–ï –§–£–ù–ö–¶–ò–ò
# 0.1. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è c —Ç–µ–∫—Å—Ç–æ–º
def send_message(chat_id, text):
    url = URL + f"sendMessage?parse_mode=markdown&chat_id={chat_id}&text={text}"
    
    start_time = time.time()
    while time.time() - start_time < 15:
        response = requests.get(url)
        if response.status_code == 200:
            return response.json().get("result", {}).get("message_id")
            break
        else:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:", response.text)
            time.sleep(0.1)
    
    url = URL + f"sendMessage?parse_mode=markdown&chat_id={chat_id}&text={SENDING_ERROR_TEXT}"
    requests.get(url)
    print("–û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ 15 —Å–µ–∫—É–Ω–¥ –ø–æ–ø—ã—Ç–æ–∫")
    return None

# 0.2. –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
def unsend_message(chat_id, message_id):
    url = URL + f"deleteMessage?chat_id={chat_id}&message_id={message_id}"
    requests.get(url)

# 0.3. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø–µ—á–∞—Ç–∏
def send_typing_effect(chat_id):
    url = URL + f"sendChatAction?chat_id={chat_id}&action=typing"
    requests.get(url)

# 1. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è c —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
def send_message_with_k(chat_id, text, keyboard):
    url = URL + f"sendMessage?text={text}&chat_id={chat_id}&parse_mode=markdown&reply_markup={keyboard}"
    
    start_time = time.time()
    while time.time() - start_time < 15:
        response = requests.get(url)
        if response.status_code == 200:
            return response.json().get("result", {}).get("message_id")
            break
        else:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:", response.text)
            time.sleep(0.1)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
    error_url = URL + f"sendMessage?parse_mode=markdown&chat_id={chat_id}&text={SENDING_ERROR_TEXT}"
    requests.get(error_url)
    print("–û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –ø–æ—Å–ª–µ 15 —Å–µ–∫—É–Ω–¥ –ø–æ–ø—ã—Ç–æ–∫")
    return None


# 2. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
def send_file(chat_id, text, file_url):

    url = URL + "sendDocument"
    data = {
        'document': file_url,
        'chat_id': chat_id,
        'comment': text,
        'parse_mode': 'Markdown'
    }
    requests.post(url, data=data)


# 3. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è c —Ç–µ–∫—Å—Ç–æ–º (–æ–ø—Ä–æ—Å)
def send_question_message(chat_id, text, keyboard=None):

    if isinstance(chat_id, bytes):
        chat_id = chat_id.decode('utf-8')
    if not keyboard:
        url = URL + f"sendMessage?text={text}&chat_id={chat_id}&parse_mode=markdown"
    else:
        url = URL + f"sendMessage?text={text}&chat_id={chat_id}&reply_markup={keyboard}&parse_mode=markdown"

    start_time = time.time()
    while time.time() - start_time < 15:
        res = requests.get(url)
        if res.status_code == 200:
            print('updating beep_data via send_question_message')
            message_id = res.json()["result"]["message_id"]
            user_id = res.json()["result"]["chat"]["id"]
            update_beep_data(message_id, user_id)
            return message_id
            break
        else:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:", res.text)
            time.sleep(0.1)


# 4. –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
def edit_question_message(chat_id, message_id, text, keyboard=None):

    if not keyboard:
        url = URL + f"editMessageText?text={text}&chat_id={chat_id}&message_id={message_id}&parse_mode=markdown"
    else:
        url = URL + f"editMessageText?text={text}&chat_id={chat_id}&reply_markup={keyboard}&message_id={message_id}&parse_mode=markdown"

    start_time = time.time()
    while time.time() - start_time < 15:
        res = requests.get(url)
        if res.status_code == 200:
            return res.json().get("result", {}).get("message_id")
        else:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:", res.text)
            time.sleep(0.1)
            

# 5. –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏—Ç–∞—É—Ä—ã –≤–æ–ø—Ä–æ—Å–∞
def create_keyboard(question_df, participant_id, beep_id, question_id, sent_time, question_type):

    # –ó–∞–≥–∞—Ç–æ–≤–∫–∞ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    raw_keyboard = []

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    response_options = []
    response_keys = [key for key in question_df.keys() if 'response_' in key]
    sorted_keys = sorted(response_keys, key=lambda x: (int(x.split('_')[1]), x))

    for col in sorted_keys:
        if 'response_' in col and question_df[col].decode('utf-8') != "nan":
            response_options.append(question_df[col])

    # –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤ —Ç–∏–ø–∞ single choice –∏ multiple choice
    if question_type in ("single_choice", "multiple_choice"):

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
        rows_amount = question_df['rows_amount']
        buttons_per_row = len(response_options) // rows_amount

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ —Ç–∏–ø–∞ multiple choice
    if question_type == "single_choice":

        # –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ
        for i in range(rows_amount):
            row = []
            for j in range(buttons_per_row):
                index = i * buttons_per_row + j
                if index < len(response_options):
                    callback_text = sanitize_callback_data(response_options[index].decode('utf-8'))

                    row.append({
                        "text": response_options[index].decode('utf-8'),
                        "callback_data": f"{beep_id}_{callback_text}_{question_id}"
                    })

            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            raw_keyboard.append(row)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = json.dumps({"inline_keyboard": raw_keyboard})

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ —Ç–∏–ø–∞ single choice
    elif question_type == "multiple_choice":

        # –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ
        for i in range(rows_amount):
            row = []
            for j in range(buttons_per_row):
                index = i * buttons_per_row + j
                if index < len(response_options):
                    callback_text = sanitize_callback_data(response_options[index].decode('utf-8').strip())
                    row.append({
                        "text": "‚¨úÔ∏è " + response_options[index].decode('utf-8'),
                        "callback_data": f"mc_{beep_id}_{callback_text}_{question_id}"
                    })

            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            raw_keyboard.append(row)

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–≤–µ –∫–æ–Ω–ø–∫–∏: –¥–ª—è –æ—Ç—Ä–ø–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –∏ –æ—á–∏—Å—Ç–∫–∏ –≤—ã–±–æ—Ä–∞
        clean_row = [{
                "text": "üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—ã–±–æ—Ä",
                "callback_data": f"mc_{beep_id}_clean"
                }]
        
        send_row = [{
                "text": "üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç",
                "callback_data": f"mc_{beep_id}_send"
                }]
        raw_keyboard.extend([clean_row, send_row])

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = json.dumps({"inline_keyboard": raw_keyboard})
    
    elif question_type == "location":
        
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–≤–∞ –ø–µ—Ä–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞
        response_options = response_options[:2]

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ
        rows_amount = 2
        buttons_per_row = 1

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        raw_keyboard = []
        for i in range(len(response_options)):
            row = []
            button = {
                "text": response_options[i].decode('utf-8')
            }
            # –ü–µ—Ä–≤–æ–π –∫–Ω–æ–ø–∫–µ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –ª–æ–∫–∞—Ü–∏–∏
            if i == 0:
                button["request_location"] = True
            row.append(button)
            raw_keyboard.append(row)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = json.dumps(
                {"keyboard": raw_keyboard,
                "resize_keyboard": True,
                "one_time_keyboard": True,
                "hide_keyboard": True})
            
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    return keyboard


# 6. –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
def create_quest_text(question_id, question, comment, expire_time):

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    has_expire_time = bool(expire_time)
    has_comment = comment != "nan"

    if has_expire_time:
        formatted_time = datetime.fromtimestamp(expire_time).strftime('%H:%M')
        if has_comment:
            question_text = QUESTION_TEXT_CAPTION.format(question_id, formatted_time, question, comment)
        else:
            question_text = QUESTION_TEXT.format(question_id, formatted_time, question)
    else:
        if has_comment:
            question_text = QUESTION_TEXT_WT_CAPTION.format(question_id, question, comment)
        else:
            question_text = QUESTION_TEXT_WT.format(question_id, question)

    return question_text


# 7. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –±–∏–ø–æ–≤
def prepare_beep(beep_data):

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞–∏–∏ –æ –≤–æ–ø—Ä–æ—Å–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    question_df = get_survey_quest(beep_data['study_id'], beep_data['question_id'], beep_data['survey'].decode('utf-8'))
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ –≤–æ–ø—Ä–æ—Å–∞
    question_type = question_df['question_type'].decode('utf-8')

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    expire_time = beep_data.get('expire_time', None)
    question_text = create_quest_text(
        question_df['question_num'],
        question_df['question'].decode('utf-8'),
        question_df['comment'].decode('utf-8'),
        expire_time)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    keyboard = None
    if question_type in ('multiple_choice', 'single_choice', 'location'):
        keyboard = create_keyboard(
            question_df, 
            beep_data['participant_id'], 
            beep_data['beep_id'], 
            beep_data['question_id'], 
            beep_data['time_to_send'], 
            question_type
        )

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º id —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º), —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ–ø—Ä–æ—Å–Ω–∏–∫–∞ (—á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º)
    return beep_data['participant_id'], question_text, keyboard


# 8. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–∏–ø–æ–≤ –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
def send_beep(participant_id, question_text, keyboard):
    send_question_message(participant_id, question_text, keyboard)


# 9.1. –§—É–Ω–∫—Ü–∏—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
def display_loading(user_id, message_id, stop_event):
    loading_texts = ["_–ó–∞–≥—Ä—É–∑–∫–∞_", "_–ó–∞–≥—Ä—É–∑–∫–∞._", "_–ó–∞–≥—Ä—É–∑–∫–∞.._", "_–ó–∞–≥—Ä—É–∑–∫–∞..._"]
    i = 0
    while not stop_event.is_set():
        question_text = loading_texts[i % len(loading_texts)]
        edit_question_message(user_id, message_id, question_text)
        i += 1
        time.sleep(0.1)


# 9.2. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–∏–ø–æ–≤ –≤ —Ç–æ–º –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–∏  
def update_message(user_id, message_id, question_id, old_beep_loc=False):

    next_beep = get_next_beep(user_id, message_id, question_id)

    if not next_beep:
        question_text = SURVEY_COMPLETE_MESSAGE
        edit_question_message(user_id, message_id, question_text) 
        update_particip_by_id(user_id,  {'status': "participating"})
        
    else:
        try:
            expire_time = next_beep.get('expire_time', None)
            question_df = get_survey_quest(next_beep['study_id'], next_beep['question_id'], next_beep['survey'].decode('utf-8'))
            question_text = create_quest_text(
                question_df['question_num'],
                question_df['question'].decode('utf-8'),
                question_df['comment'].decode('utf-8'),
                expire_time)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            keyboard = None
            if question_df['question_type'].decode('utf-8') in ('multiple_choice', 'single_choice', 'location'):
                keyboard = create_keyboard(
                    question_df, 
                    next_beep['participant_id'], 
                    next_beep['beep_id'], 
                    next_beep['question_id'], 
                    next_beep['time_to_send'], 
                    question_df['question_type'].decode('utf-8')
                )

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –±–∏–ø–∞
            # –í —Å–ª—É—á–∞–µ –ª–æ–∫–∞—Ü–∏–∏ (–µ—Å–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∞—Å—å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –±–∏–ø–æ–º –∏–ª–∏ –±—É–¥–µ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å—Å—è –≤ –Ω—ã–Ω–µ—à–Ω–µ–º) ‚Äì –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            if old_beep_loc or question_df['question_type'].decode('utf-8') == 'location':
                send_beep(user_id, question_text, keyboard)
            # –í —Å–ª—É—á–∞–µ –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ ‚Äì —á–µ—Ä–µ–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            else:
                edit_question_message(user_id, message_id, question_text, keyboard)

        except Exception as e:
            print(e)


# –†–ê–°–°–´–õ–ö–ò
# 11.1. –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –±–∏–ø–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
def form_beep_dicts(chat_id, study_id, surveys_len, days, time_to_send, expire_time, questions_types, survey):
    
    beeps_list = []
    for day in range (0, days + 1):
        for beep in range(int(surveys_len)):
            beep_dict = {}
            beep_dict['participant_id'] = chat_id
            beep_dict['study_id'] = study_id
            beep_dict['question_id'] = beep + 1
            beep_dict['time_to_send'] = time_to_send[day].strftime('%Y-%m-%dT%H:%M:%SZ') 
            beep_dict['expire_time'] = expire_time[day].strftime('%Y-%m-%dT%H:%M:%SZ')
            beep_dict['question_type'] = questions_types[beep]
            beep_dict['survey'] = survey
            beeps_list.append(beep_dict)

    return beeps_list

# 11.2. –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –±–∏–ø–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (—Å—Ç–∞—Ä—Ç–æ–≤—ã–π –æ–ø—Ä–æ—Å–Ω–∏–∫)
def form_beep_dicts_es(chat_id, study_id, surveys_len, time_to_send, questions_types, survey):
    
    beeps_list = []
    for beep in range(int(surveys_len)):
        beep_dict = {}
        beep_dict['participant_id'] = chat_id
        beep_dict['study_id'] = study_id
        beep_dict['question_id'] = beep + 1
        beep_dict['time_to_send'] = time_to_send.strftime('%Y-%m-%dT%H:%M:%SZ') 
        beep_dict['question_type'] = questions_types[beep]
        beep_dict['survey'] = survey
        beeps_list.append(beep_dict)
        
    return beeps_list

# 12. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∑–∞–∫—Ä—ã—Ç–∏—è –∏—Å—Ç–µ–∫—à–∏—Ö –±–∏–ø–æ–≤
def check_expired_beeps():

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
    users_to_check, dicts_to_edit = handle_expired_beeps()

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –æ–ø—Ä–æ—Å–Ω–∏–∫–∏ –æ–ø—Ä–æ—Å–Ω–∏–∫–∏
    if dicts_to_edit:
        for dictinoary in dicts_to_edit:
            edit_question_message(
                dictinoary['chat_id'], 
                dictinoary['message_id'], 
                SURVEY_EXPIRE_MESSAGE)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–ø—Ä–æ—Å–Ω–∏–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    return users_to_check


# –§–û–†–ú–ò–†–û–í–ê–ù–ò–ï –†–ê–°–ü–ò–°–ê–ù–ò–Ø
# 13.1. –í—Å–æ–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫ / –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
def extract_and_sort_times(text):
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –∏ –æ–¥–∏–Ω–æ—á–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞
    matches = re.findall(r'\b\d{1,2}:\d{2}(?:-\d{1,2}:\d{2})?', text)
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    def get_start_time(time_str):
        start = time_str.split('-')[0]
        return datetime.strptime(start, "%H:%M")
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É
    sorted_times = sorted(matches, key=get_start_time)
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤ —Å—Ç—Ä–æ–∫—É
    return ', '.join(sorted_times)

# 13.2. –í—Å–æ–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞
def extract_time_range(text):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–Ω–∞–∫–∞ —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞
    times = list(map(int, re.findall(r'=(\d+)', text)))
    
    if not times:
        return ""
    
    min_time = min(times)
    max_time = max(times)

    return str(min_time) if min_time == max_time else f"{min_time} - {max_time}" 

# 13.3. –í—Å–æ–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤
def extract_survey_value(text, survey_name):
    pattern = rf'{re.escape(survey_name)}=([^;]+)'
    match = re.search(pattern, text)
    if match:
        return match.group(1).strip()
    return None

# 13.4. –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–¥–ª—è –±–∞–∑–æ–≤—ã—Ö –æ–ø—Ä–æ—Å–Ω–∏–∫–æ–≤)
def form_schedule(chat_id, study_info, particip_info, timezone, base_surveys):

    # –§–æ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –≤—Ä–µ–º–µ–Ω–µ–º –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ–ø—Ä–æ—Å–æ–≤
    completion_tl = extract_time_range(study_info['completion_tl'].decode('utf-8'))

    # –§–æ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –≤—Ä–µ–º–µ–Ω–µ–º / –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ 
    prompting_time = extract_and_sort_times(study_info['prompting_time'].decode('utf-8'))

    send_message(chat_id, PARTICIP_INFO_MESSAGE.format(
        completion_tl, 
        study_info['duration'],
        prompting_time
    ))

    for survey in base_surveys:

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞
        prompting_time = extract_survey_value(study_info['prompting_time'].decode('utf-8'), survey)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞
        time_limit = int(extract_survey_value(study_info['completion_tl'].decode('utf-8'), survey))
                        
        # –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ë–î
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø—ã –≤–æ–ø—Ä–æ—Å–æ–≤
        questions_types = get_questions_types(particip_info['study_id'].decode('utf-8'), survey)

        # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏–Ω—É –æ–ø—Ä–æ—Å–Ω–∏–∫–∞
        survey_len = len(questions_types)

        # –ó–∞–≥–æ—Ç–æ–≤–∫–∞ –¥–ª—è –±–∏–ø–æ–≤ –≤ —Ä–∞–º–∫–∞—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
        beep_dicts = {}

        # –ü—Ä–æ—Ö–æ–¥–∏–º—è –ø–æ –∫–∞–∂–¥–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–æ—á–∫–µ / –∏–Ω—Ç–µ—Ä–≤–∞–ª—É
        time_points = prompting_time.split(",")

        for time_to_send in time_points:

            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
            time_to_send = time_to_send.strip()

            # –ó–∞–≥–æ—Ç–æ–≤–∫–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏
            time_to_send_arr = []
            expire_time_arr = []

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
            if "-" in time_to_send:

                start_str, end_str = time_to_send.split("-")
                start_time = datetime.strptime(start_str, "%H:%M")
                end_time = datetime.strptime(end_str, "%H:%M")

                for day in range(study_info['duration'] + 1):
                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
                    random_seconds = random.randint(0, int((end_time - start_time).total_seconds()))
                    
                    # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π, –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å–µ–∫—É–Ω–¥—ã –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
                    time_to_send = datetime.combine(date.today() + timedelta(days=day), start_time.time()) + timedelta(seconds=random_seconds, hours=timezone)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                    time_to_send_arr.append(time_to_send)

                    # –§–æ—Ä–º–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –±–∏–ø–∞
                    expire_time = time_to_send + timedelta(minutes=time_limit)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è –±–∏–ø–∞
                    expire_time_arr.append(expire_time)

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–¥–∏–Ω–æ—á–Ω—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–æ—á–∫—É
            else:
                base_time = datetime.strptime(time_to_send, "%H:%M").time()
                for day in range(study_info['duration'] + 1):
                    
                    # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π –∏ –¥–æ–±–∞–≤–ª—è–µ–º —á–∞—Å–æ–≤—É—é –∑–æ–Ω—É
                    time_to_send = datetime.combine(date.today() + timedelta(days=day), base_time) + timedelta(hours=timezone)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                    time_to_send_arr.append(time_to_send)
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è –±–∏–ø–∞
                    expire_time = time_to_send + timedelta(minutes=time_limit)
                    expire_time_arr.append(expire_time)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä–∏ –¥–ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –±–∏–ø–æ–≤
            beep_dicts = form_beep_dicts(
                chat_id, 
                particip_info['study_id'].decode('utf-8'), 
                survey_len, 
                study_info['duration'], 
                time_to_send_arr, 
                expire_time_arr,
                questions_types,
                survey)
            
            print(beep_dicts)

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
            upload_beeps(beep_dicts)

# 13.5. –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–¥–ª—è –≤—Ö–æ–¥–Ω–æ–≥–æ / –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–Ω–∏–∫–æ–≤)
def form_schedule_es(chat_id, study_info, particip_info, survey, survey_type):
                        
    # –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ë–î
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø—ã –≤–æ–ø—Ä–æ—Å–æ–≤
    questions_types = get_questions_types(particip_info['study_id'].decode('utf-8'), survey)

    # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏–Ω—É –æ–ø—Ä–æ—Å–Ω–∏–∫–∞
    survey_len = len(questions_types)

    # –ó–∞–≥–æ—Ç–æ–≤–∫–∞ –¥–ª—è –±–∏–ø–æ–≤ –≤ —Ä–∞–º–∫–∞—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
    beep_dicts = {}

    # –ë–µ—Ä–µ–º —Ç–µ–∫—É—â–∏–µ –≤—Ä–µ–º—è –∏ –ø—Ä–∏–±–∞–≤–ª—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
    time_to_send = datetime.now() + timedelta(hours=UTC_SHIFT)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä–∏ –¥–ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –±–∏–ø–æ–≤
    beep_dicts = form_beep_dicts_es(
        chat_id, 
        particip_info['study_id'].decode('utf-8'), 
        survey_len, 
        time_to_send, 
        questions_types,
        survey)
        
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
    upload_beeps(beep_dicts, survey_type)
    

# –†–ê–ë–û–¢–ê –° MULTIPLE CHOICE
# 14. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π
def extract_selected_options(rows):

    # –ó–∞–≥–æ—Ç–æ–≤–∫–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π
    selected_options = []
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –≤–∞—Ä–∏–∞–Ω—Ç ‚Äì –µ—Å–ª–∏ –æ–Ω –≤—ã–±—Ä–∞–Ω, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ–≥–æ
    for row in rows:
        for option in row:
            text = option.get("text", "")
            if text.startswith("‚úÖ"):

                # –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª ‚úÖ –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –ø–æ –∫—Ä–∞—è–º
                option_text = text[1:].strip()
                if option_text: 
                    selected_options.append(option_text)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    print(selected_options)
    if selected_options:
        return True, f"[{'; '.join(selected_options)}]"
    else:
        return False, "[empty]"

# 15. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω—É–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π
def clean_selected_options(rows):

    # –û—á–∏—â–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
    for row in rows:
        for option in row:
            text = option.get("text", "")
            if text.startswith("‚úÖ"):
                option["text"] = "‚¨úÔ∏è " + text[1:].strip()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –æ—á–∏—â–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    keyboard = json.dumps({"inline_keyboard": rows})
    return keyboard

# 16. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def handle_mc_clean_text(chose_anything, message_text):

    changes = False

    if chose_anything:
        message_text = message_text + f"%0A%0A_{KEYBOARD_CLEARED}_"
        changes = True
    else:

        if KEYBOARD_CLEARED in message_text:
            message_text = message_text.replace(KEYBOARD_CLEARED, "")
            message_text = re.sub(r'(%0A)+$', '', message_text.strip())
            changes = True
        
        if CANNOT_CLEAR_KEYBOARD not in message_text:
            message_text = message_text + f"_{CANNOT_CLEAR_KEYBOARD}_"
            changes = True

    return message_text, changes

# 17. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def remove_mc_clean_text(message_text):

    for keyword in (CANNOT_CLEAR_KEYBOARD, KEYBOARD_CLEARED):
        message_text = message_text.replace(keyword, '')

    message_text = re.sub(r'(%0A)+$', '', message_text)

    return message_text

# 18. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞
def handle_mc_choice(chosen_option, rows):
    
    print(rows)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –≤–∞—Ä–∏–∞–Ω—Ç ‚Äì –µ—Å–ª–∏ –æ–Ω –≤—ã–±—Ä–∞–Ω, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ–≥–æ
    for row in rows:
        for option in row:

            cb_data = option["callback_data"]
            text = option["text"]

            if chosen_option == cb_data:

                # –ú–µ–Ω—è–µ–º ‚¨úÔ∏è –Ω–∞ ‚úÖ –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç
                if text.startswith("‚¨úÔ∏è"):
                    option["text"] = "‚úÖ" + text[1:].strip()
                elif text.startswith("‚úÖ"):
                    option["text"] = "‚¨úÔ∏è" + text[1:].strip()

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = json.dumps({"inline_keyboard": rows})
    
    return rows, keyboard

# –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï
# 19. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª—è –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
def apply_formatting(text, formatting):
    
    formatting = sorted(formatting, key=lambda x: x['offset'] + x['length'], reverse=True)
    
    for f in formatting:
        start = f['offset']
        end = start + f['length']
        if f['type'] == 'italic':
            text = text[:start] + '_' + text[start:end] + '_' + text[end:]
        elif f['type'] == 'bold':
            text = text[:start] + '*' + text[start:end] + '*' + text[end:]
    return text

# –ü–†–û–í–ï–†–ö–ê
# 20. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
def check_text_input(text_input):

    if text_input == '[no text]':
        correct = False
        upd_input = None
    else:
        correct = True
        upd_input = text_input.strip()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    return correct, upd_input

# –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–õ–ë–≠–ö–æ–í
def sanitize_callback_data(text: str, max_bytes: int = 30):
    
    # 1. –£–¥–∞–ª–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏
    text = re.sub(
        r'[\U0001F600-\U0001F64F'  # emoticons
        r'\U0001F300-\U0001F5FF'  # symbols & pictographs
        r'\U0001F680-\U0001F6FF'  # transport & map symbols
        r'\U0001F1E0-\U0001F1FF'  # flags (iOS)
        r'\U00002700-\U000027BF'  # dingbats
        r'\U0001F900-\U0001F9FF'  # supplemental symbols
        r'\U00002600-\U000026FF'  # miscellaneous symbols
        r'\U0001FA70-\U0001FAFF'  # extended symbols
        r'\U000025A0-\U000025FF]+',  # geometric shapes
        '', text, flags=re.UNICODE
    )

    # 2. –¢—Ä–∏–º –ø—Ä–æ–±–µ–ª–æ–≤
    text = text.strip()

    # 3. –û–±—Ä–µ–∑–∫–∞ –ø–æ –±–∞–π—Ç–∞–º
    encoded = text.encode('utf-8')
    if len(encoded) <= max_bytes:
        return text
    else:
        # –ø–æ—Å–∏–º–≤–æ–ª—å–Ω–æ –æ–±—Ä–µ–∑–∞–µ–º –¥–æ –ª–∏–º–∏—Ç–∞ –ø–æ –±–∞–π—Ç–∞–º
        result = ''
        byte_len = 0
        for char in text:
            char_bytes = len(char.encode('utf-8'))
            if byte_len + char_bytes > max_bytes:
                break
            result += char
            byte_len += char_bytes
        return result

